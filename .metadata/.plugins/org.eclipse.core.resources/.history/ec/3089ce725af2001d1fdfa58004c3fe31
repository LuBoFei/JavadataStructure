package Huffmantreecode;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Huffmancode {

	public static void main(String[] args) {
		
		//测试压缩文件
		/*
		 * String srcFile = "E://a.txt"; String dstFile = "E://a.zip";
		 * 
		 * zipFIle(srcFile, dstFile); System.out.println("ok");
		 */
		
		//解压文件
		String zip = "E://a.zip";	
		String dst = "E://a.zip";
		unZipFile(zip, dst);
		System.out.println("ko");

		/*
		 * String content = "i like like like java do you like a java";
		 * 
		 * byte[] contentBytes = content.getBytes();
		 * 
		 * byte[] bcb = huffmanZip(contentBytes);
		 * 
		 * System.out.println(Arrays.toString(bcb));
		 * 
		 * byte[] sourceBytes = decode(huffmanCodes, bcb); System.out.println(new
		 * String(sourceBytes));
		 */

		
		
		/*分步
		 * byte[] contentBytes = content.getBytes();
		 * System.out.println(contentBytes.length);
		 * 
		 * List<Node1> nodes = getNodes(contentBytes); System.out.println(nodes);
		 * 
		 * System.out.println("---------------------"); Node1 huffmanTree =
		 * createHuffmanTree(nodes); huffmanTree.preOrder();
		 * 
		 * System.out.println("---------------------"); // getCodes(huffmanTree, "",
		 * stringBuilder); Map<Byte, String> codes = getCodes(huffmanTree);
		 * System.out.println(codes);
		 * 
		 * //zip(contentBytes, codes); byte[] huffermanBytes = zip(contentBytes, codes);
		 * System.out.println(Arrays.toString(huffermanBytes));
		 */
		
		

	}
	
	//对文件进行解压
	private static void unZipFile(String zipFile,String dstFile) {
		InputStream in = null;
		ObjectInputStream ois = null;
		OutputStream os = null;
		
		try {
			in = new FileInputStream(zipFile);
			ois = new ObjectInputStream(in);
			byte [] huffmanBytes = (byte []) ois.readObject();
			Map<Byte,String> huffmanCodes = (Map<Byte,String>)ois.readObject();
			
			//解码
			byte[] bytes = decode(huffmanCodes, huffmanBytes);
			os = new FileOutputStream(dstFile);
			
			os.write(bytes);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				in.close();
				ois.close();
				os.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	//对文件进行压缩
	private static void zipFIle(String srcFile, String dstFile) {
		
		FileInputStream is = null;
		OutputStream os = null;
		ObjectOutputStream oos = null;
		try {
			//文件输入流
			is = new FileInputStream(srcFile);
			
			//创建一个和原文加大小一样・的byte数组
			byte[] b = new byte[is.available()];
			
			//读取文案金
			is.read(b);
			
			//对获取到的文件进行编码
			byte[] buffmanBytes = huffmanZip(b);
			//输出流，存放压缩文件
			os = new FileOutputStream(dstFile);
			oos = new ObjectOutputStream(os);
			//用对象流是为了恢复文件
			oos.writeObject(buffmanBytes);
			
			oos.writeObject(huffmanCodes);
			
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally {
			try {
				is.close();
				os.close();
				oos.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	
	//解码
	//1.将一个byte 转成 一个二进制的字符串
	private static String buteToBitString(boolean flag, byte b){
		
		int temp = b;
		
		//如果为整数补高位
		if(flag) { //如果为8位,最后一个字节不需要
			temp |= 256;
		}
		
		String str = Integer.toBinaryString(temp);// 返回是补码
		
		if(flag) {
			return str.substring(str.length() - 8);
		}else {
			return str;
		}
	}
	
	//2.对压缩数据解码
	private static byte[] decode(Map<Byte,String> hurrmanCodes , byte [] huffmanBytes) {
		StringBuilder stringBuilder = new StringBuilder();
		for( int i = 0; i < huffmanBytes.length; i++) {
			byte b = huffmanBytes[i];
			boolean flag = (i == huffmanBytes.length - 1);
			stringBuilder.append(buteToBitString(!flag, b));
		}
		
		//按照指定的赫夫曼码解码
		Map<String,Byte> map = new HashMap<String, Byte>(); 
		
		for( Map.Entry<Byte,String> entry : hurrmanCodes.entrySet()) {
			map.put(entry.getValue(), entry.getKey());
		}
		
		List<Byte> list = new ArrayList<Byte>();
		for( int i = 0; i < stringBuilder.length(); ) {
			
			int count = 1;
			boolean flag = true;
			Byte b = null;
			
			while( flag) {
				String key = stringBuilder.substring(i,i+count);
				b = map.get(key);
				
				if(b == null) {
					count++;
				}
				else {
					flag = false;
				}
				
			}
			
			list.add(b);
			i += count;
			
		}
		
		byte b[] = new byte[list.size()];
		for(int i = 0; i < b.length; i++) {
			b[i] = list.get(i);
 		}
		
		return b;
	}
	
	//使用一个方法封装前面的方法
	private static byte[] huffmanZip(byte [] bytes ) {
		
		List<Node1> nodes = getNodes(bytes);
		//创建赫夫曼殊
		//根据赫夫曼殊生成 树
		Node1 huffermanRoot = createHuffmanTree(nodes);
		
		Map<Byte, String> codes = getCodes(huffermanRoot);
		
		//压缩成字节数组
		byte[] huffermanBytes = zip(bytes, codes);
		
		return huffermanBytes;
	}
	
	//将字符数组，生成的赫夫曼编码表，返回一个赫夫曼编码压缩后的bute
	private static byte[] zip(byte[] bytes, Map<Byte,String> huffmantree) {
		
		StringBuilder stringBuilder = new StringBuilder();
		for(byte b : bytes) {
			stringBuilder.append(huffmantree.get(b));
		}
		
		//System.out.println(stringBuilder);
		int len;
		if(stringBuilder.length() % 8 == 0) {
			len = stringBuilder.length() / 8;
		}else {
			len = stringBuilder.length() / 8 + 1;
		}
		
		byte[] huffermanBytes = new byte[len];
		int index= 0;
		
		for(int i = 0; i < stringBuilder.length(); i += 8) {//每八位对应一个byte
			String strByte;
			
			if(i+8 > stringBuilder.length()) {
				strByte = stringBuilder.substring(i);
			}
			else {
				strByte = stringBuilder.substring(i,i+8);
			}
					
			huffermanBytes[index] = (byte)Integer.parseInt(strByte,2);
			
			index++;
			
		}
		
		return huffermanBytes;
		
	}

	private static List<Node1> getNodes(byte[] bytes) {

		ArrayList<Node1> nodes = new ArrayList<Node1>();

		Map<Byte, Integer> counts = new HashMap();

		for (byte b : bytes) {
			Integer count = counts.get(b);
			if (count == null) {
				// 第一次
				counts.put(b, 1);
			} else {
				counts.put(b, count + 1);
			}
		}

		for (Map.Entry<Byte, Integer> entry : counts.entrySet()) {

			nodes.add(new Node1(entry.getKey(), entry.getValue()));

		}

		return nodes;

	}

	private static Node1 createHuffmanTree(List<Node1> nodes) {

		while (nodes.size() > 1) {
			Collections.sort(nodes);

			// 取出一颗最小的节点（二叉树）
			Node1 leftNode = nodes.get(0);
			// 取出一颗第二课最小的节点（二叉树）
			Node1 rightNode = nodes.get(1);
			// 创建一颗新的二叉树，没date。只有权值
			Node1 parent = new Node1(null, leftNode.weight + rightNode.weight);

			parent.left = leftNode;
			parent.right = rightNode;

			// 删除处理过的二叉树
			nodes.remove(leftNode);
			nodes.remove(rightNode);

			nodes.add(parent);

		}
		return nodes.get(0);

	}

	public static void preOrder(Node1 node) {
		if(node != null) {
			node.preOrder();
		}else {
			System.out.println("是空术");
		}
	}
	
	static Map<Byte,String> huffmanCodes = new HashMap<Byte, String>();
	static StringBuilder stringBuilder = new StringBuilder();
	
	private static Map<Byte,String> getCodes(Node1 root){
		if(root== null) {
			return null;
		}
		getCodes(root.left,"0",stringBuilder);
		getCodes(root.right,"1",stringBuilder);
		return huffmanCodes;
	}
	
	//赫夫曼编码表
	private static void getCodes(Node1 node, String code,StringBuilder stringBuilder) {
		StringBuilder stringBuilder2 = new StringBuilder(stringBuilder);
		
		stringBuilder2.append(code);
		
		if(node != null) {
			
			if(node.date == null) {
				//非叶子节点
				getCodes(node.left, "0", stringBuilder2);
				getCodes(node.right, "1", stringBuilder2);
			}else {
				huffmanCodes.put(node.date, stringBuilder2.toString());
			}
			
		}
	}
}

class Node1 implements Comparable<Node1> {
	Byte date;// 存放数据
	int weight;// 权值
	Node1 left;// 左子节点
	Node1 right;

	public Node1(Byte date, int weight) {
		super();
		this.date = date;
		this.weight = weight;
	}

	@Override
	public String toString() {
		return "Node1 [date=" + date + ", weight=" + weight + "]";
	}

	@Override
	public int compareTo(Node1 o) {
		// TODO Auto-generated method stub
		// 从小到大排
		return this.weight - o.weight;
	}

	// 前序遍历
	public void preOrder() {
		System.out.println(this);
		if (this.left != null) {
			this.left.preOrder();
		}
		if (this.right != null) {
			this.right.preOrder();
		}
	}
}