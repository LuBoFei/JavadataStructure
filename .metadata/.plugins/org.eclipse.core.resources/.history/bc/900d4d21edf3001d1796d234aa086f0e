package tree;

public class BinaryTreeDemo {
	public static void main(String[] args) {
		
		int [] arr = {7,3,10,12,5,1,9};
		BinaryTree binaryTree = new BinaryTree();
		for(int i = 0; i < arr.length; i++) {
			binaryTree.add(new Node(arr[i]));
		}
		System.out.println("zhong");
		binaryTree.infixOrder();
		
		binaryTree.delNode(2);
		System.out.println("zhong");
		binaryTree.infixOrder();
		
	}
}

class BinaryTree{
	private Node root;
	public void add(Node node) {
		if(root == null) {
			root = node;
		}else {
			root.add(node);
		}
	}
	
	public void infixOrder() {
		if(root != null) {
			root.infixOrder();
		}else {
			System.out.println("no");
		}
	}
	
	public Node search(int value) {
		if(root == null) {
			return null;
		}else {
			return root.search(value);
		}
	}
	
	public Node searchParent(int value) {
		if(root == null) {
			return null;
		}else {
			return root.searchParent(value);
		}
	}
	
	public void delNode(int value) {
		if(root == null) {
			return;
		}else {
			Node targetNode = search(value);
			if(targetNode == null) {
				return;
			}
			
			//树只有一个节点
			if(root.left == null && root.right == null) {
				root = null;
				return;
			}
			
			Node parent = searchParent(value);
			if(targetNode.left == null && targetNode.right == null) {
				//叶子节点
				if(parent.left != null && parent.left.value == value) {
					parent.left = null;
				}else if(parent.right != null && parent.right.value == value) {
					parent.right = null;
				}
			}
			
		}
		
	}
	
}

class Node{
	int value;
	Node left;
	Node right;
	public Node(int value) {
		this.value = value;
	}
	
	@Override
	public String toString() {
		return "Node [value=" + value + "]";
	}

	public void add(Node node) {
		//递归添加
		if(node == null) {
			return ;
		}
		
		if ( node.value < this.value) {
			if(this.left == null) {
				this.left = node;
			}else {
				//递归添加
				this.left.add(node);
			}
		}else {
			if(this.right == null) {
				this.right = node;
			}else {
				this.right.add(node);
			}
		}
	}
	
	public Node search(int value) {
		if(value == this.value) {
			return this;
		}else if(value < this.value) {
			if(this.left == null) {
				return null;
			}
			return this.left.search(value);
		}else {
			if(this.right == null) {
				return null;
			}
			return this.right.search(value);
		}
	}
	
	public Node searchParent(int value) {
		if((this.left != null && this.left.value == value) || (this.right != null && this.right.value == value)) {
			return this;
		}else {
			if(value < this.value && this.left != null) {
				return this.left.searchParent(value);
			}else if(value >= this.value && this.right != null) {
				return this.right.searchParent(value);
			}else {
				return null;
			}
		}
	}
	
	public void infixOrder() {
		if(this.left != null) {
			this.left.infixOrder();
		}
		System.out.println(this);
		if(this.right !=null) {
			this.right.infixOrder();
		}
	}
	
}
